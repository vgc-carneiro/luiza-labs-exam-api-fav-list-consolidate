const app = require('../../../app');
const debug = require('debug')('modelo-express:server');
const http = require('http');
const log = require("log4js").getLogger("app");
const { createTerminus } = require('@godaddy/terminus');
const mongoose = require('mongoose');
const env = require('../env');

let port = env.app.port;
app.set('port', port || 3000);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 *  healthcheck config
 */
function onSignal() {
	console.log('server is starting cleanup')
	// start cleanup of resource, like databases or file descriptors
}

async function onHealthCheck() {
	return new Promise((resolve, reject) => {
		try{
			const state = mongoose.connection.readyState;
			switch(state) {
			case 0 :
				log.error('Connection Mongo is out.');
				reject('Database connection Mongo is not working.');
				break;
			case 1:
				log.info('Connection Mongo is connected');
				break;
			case 2:
				log.info('Connection Mongo is connecting');
				break;
			case 3:
				log.info('Connection Mongo is disconnecting');
				break;
			default:
				log.error('Mongo, not valid state.', state);
				reject('Database connection Mongo is not working.');
				break;
			}
			resolve(true);
		}catch(e){
			log.error('healthCheck.ERROR: ',e);
			reject(e);
		}
	})
}

createTerminus(server, {
	signal: 'SIGINT',
	healthChecks: { '/healthcheck': onHealthCheck },
	onSignal
})


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}